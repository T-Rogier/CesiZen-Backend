name: Release & Deploy - STAGING

on:
  pull_request:
    branches: [ main ]
    types: [closed]

permissions:
  contents: write     # pour créer le tag
  packages: write     # push vers GHCR

jobs:
  release-and-deploy:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/t-rogier/cesizen-api
      STAGING_SERVICE: cesizen_api_staging
      STAGING_HEALTH_URL: https://staging.api.cesizen.fr/health
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1) Déterminer le bump à partir des labels de la PR
      - name: Compute bump from PR labels
        id: bump
        run: |
          echo "labels=${{ toJson(github.event.pull_request.labels) }}" > labels.json
          if grep -qi '"name":\s*"major"' labels.json; then echo "part=major" >> $GITHUB_OUTPUT
          elif grep -qi '"name":\s*"minor"' labels.json; then echo "part=minor" >> $GITHUB_OUTPUT
          else echo "part=patch" >> $GITHUB_OUTPUT
          fi
          echo "Part selected: $(cat $GITHUB_OUTPUT)"

      # 2) Récupérer le dernier tag vX.Y.Z
      - name: Get last tag
        id: lasttag
        run: |
          LAST=$(git tag -l 'v*' --sort=-v:refname | head -n1)
          if [ -z "$LAST" ]; then LAST="v0.0.0"; fi
          echo "last=$LAST" >> $GITHUB_OUTPUT

      # 3) Calculer la nouvelle version
      - name: Compute next version
        id: version
        run: |
          LAST='${{ steps.lasttag.outputs.last }}'
          PART='${{ steps.bump.outputs.part }}'
          V=${LAST#v}
          IFS='.' read -r MA MI PA <<< "$V"
          case "$PART" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch) PA=$((PA+1)) ;;
          esac
          NEW="v${MA}.${MI}.${PA}"
          echo "new=$NEW" >> $GITHUB_OUTPUT
          echo "New version: $NEW"

      # 4) Créer le tag Git (vX.Y.Z)
      - name: Create Git tag
        run: |
          NEW='${{ steps.version.outputs.new }}'
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag -a "$NEW" -m "Release $NEW"
          git push origin "$NEW"

      # 5) Login GHCR
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: t-rogier
          password: ${{ secrets.GITHUB_TOKEN }}

      # 6) Setup Docker Buildx
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      # 7) Build & Push image (vX.Y.Z, latest, sha-XXXXX)
      - name: Build and Push
        env:
          DOCKERFILE_PATH: CesiZen-Backend/Dockerfile
          BUILD_CONTEXT: .
        run: |
          VERSION='${{ steps.version.outputs.new }}'
          SHA_TAG="sha-${GITHUB_SHA::7}"
          docker buildx build \
            --platform linux/amd64 \
            -t $IMAGE_NAME:$VERSION \
            -t $IMAGE_NAME:latest \
            -t $IMAGE_NAME:$SHA_TAG \
            --push \
            .

      # 8) Déploiement STAGING via SSH : update service avec le NOUVEAU tag
      - name: Deploy to STAGING (Swarm service update)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            VERSION='${{ steps.version.outputs.new }}'
            IMAGE='${{ env.IMAGE_NAME }}'
            docker service update \
              --image ${IMAGE}:${VERSION} \
              --with-registry-auth \
              --update-order start-first \
              --update-parallelism 1 \
              --update-delay 10s \
              ${{ env.STAGING_SERVICE }}

      # 9) Healthcheck STAGING
      - name: Healthcheck STAGING
        run: |
          URL='${{ env.STAGING_HEALTH_URL }}'
          for i in {1..30}; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL")
            if [ "$code" = "200" ]; then
              echo "STAGING OK"
              exit 0
            fi
            echo "Waiting... ($i)"; sleep 5
          done
          echo "STAGING healthcheck failed" >&2
          exit 1
    environment: staging
